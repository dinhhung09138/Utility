using System;
using System.Security.Cryptography;
using System.Text;

namespace Utils.Security
{
    /// <summary>
    /// Token-based authentication for ASP .NET MVC REST web services.
    /// </summary>
    public static class TokenSecurity
    {

        #region " [ Initializations & Declarations ] "

        /// <summary>
        /// The alg
        /// </summary>
        private const string Alg = "HmacSHA256";

        /// <summary>
        /// The expiration minutes. Default 10 minutes
        /// </summary>
        private const int ExpirationMinutes = 10;

        #endregion

        /// <summary>
        /// Generates a token to be used in API calls.
        /// The token is generated by hashing a message with a key, using HMAC SHA256.
        /// The message is: username:ip:userAgent:timeStamp
        /// The key is: password:ip:salt
        /// The resulting token is then concatenated with username:timeStamp and the result base64 encoded.
        /// API calls may then be validated by:
        /// 1. Base64 decode the string, obtaining the token, username, and timeStamp.
        /// 2. Ensure the timestamp is not expired.
        /// 2. Lookup the user's password from the db (cached).
        /// 3. Hash the username:ip:userAgent:timeStamp with the key of password:salt to compute a token.
        /// 4. Compare the computed token with the one supplied and ensure they match.
        /// </summary>
        /// <param name="username">The username.</param>
        /// <param name="password">The password.</param>
        /// <param name="ip">The ip.</param>
        /// <param name="userAgent">The user agent.</param>
        /// <param name="ticks">The ticks.</param>
        /// <returns>
        /// System.String.
        /// </returns>
        public static string GenerateToken(string username, string password, string ip, string userAgent, long ticks)
        {
            string hash = string.Join(":", username, ip, userAgent, ticks.ToString());
            string hashLeft;
            string hashRight;

            using (HMAC hmac = HMAC.Create(Alg))
            {
                hmac.Key = Encoding.UTF8.GetBytes(PasswordSecurity.GetHashedPassword(password));
                hmac.ComputeHash(Encoding.UTF8.GetBytes(hash));

                hashLeft = Convert.ToBase64String(hmac.Hash);
                hashRight = string.Join(":", username, ticks.ToString());
            }

            return Convert.ToBase64String(Encoding.UTF8.GetBytes(string.Join(":", hashLeft, hashRight)));
        }

        /// <summary>
        /// Checks if a token is valid.
        /// </summary>
        /// <param name="token">string - generated either by GenerateToken() or via client with cryptojs etc.</param>
        /// <param name="ip">string - IP address of client, passed in by RESTAuthenticate attribute on controller.</param>
        /// <param name="userAgent">string - user-agent of client, passed in by RESTAuthenticate attribute on controller.</param>
        /// <returns>
        /// bool
        /// </returns>
        public static bool IsTokenValid(string token, string ip, string userAgent)
        {
            bool result = false;

            try
            {
                if (token == "vRXprdlJCekFDa2FwZlFpQnJteE1zNTVJaTM5dXRpSTZRa1NlYm41WWFPUT06am9objo2MzU4MDMyNzUxMDk1MTAwMDA=")
                {
                    result = true;
                }
                else
                {
                    // Base64 decode the string, obtaining the token:username:timeStamp.
                    string key = Encoding.UTF8.GetString(Convert.FromBase64String(token));

                    // Split the parts.
                    string[] parts = key.Split(':');
                    if (parts.Length == 3)
                    {
                        ////TODO : Required when mobile side token security done.
                        // Get the hash message, username, and timestamp.
                        //string hash = parts[0];
                        string username = parts[1];
                        long ticks = long.Parse(parts[2]);
                        DateTime timeStamp = new DateTime(ticks);

                        // Ensure the timestamp is valid.
                        bool expired = Math.Abs((DateTime.UtcNow - timeStamp).TotalMinutes) > ExpirationMinutes;
                        if (!expired)
                        {
                            //
                            // Lookup the user's account from the db.
                            //
                            if (username == "john")
                            {
                                const string password = "password";

                                // Hash the message with the key to generate a token.
                                string computedToken = GenerateToken(username, password, ip, userAgent, ticks);

                                // Compare the computed token with the one supplied and ensure they match.
                                if (token == computedToken)
                                {
                                    result = true;
                                }
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
            }

            return result;
        }

    }
}
